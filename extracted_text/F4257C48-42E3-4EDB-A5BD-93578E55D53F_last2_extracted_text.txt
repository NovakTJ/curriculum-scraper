--- PAGE 1 ---
Septembar 2024. Copyright 2018-2024 by Dragan Milićev
Reference
❖ U principu, reference se upotrebljavaju onda kada se želi notacija prenosa 
argumenta po vrednosti (umesto da se prenosi pokazivač kao “eksplicitan” 
posrednik), ali je potrebno da:
• se izbegne kopiranje stvarnog argumenta u formalni
• se podrži supstitucija, tj. da stvarni argument može biti specijalizacija tipa 
formalnog parametra
• argument bude polimorfan
❖ Druga situacija jeste ta kada se želi da funkcija vraća nešto što se može dalje 
menjati, tipično kod preklapanja operatora, kako bi se ponašali slično 
operatorima za ugrađene tipove; na primer:
vector<complex> v(100); 
v[i]++; 
 239
Operator [] deﬁnisan za klasu vector<complex> vraća referencu tipa complex&

--- PAGE 2 ---
Septembar 2024. Copyright 2018-2024 by Dragan Milićev
Klasni tipovi
❖ Na jeziku C++, klasni tipovi su strukture (struct) i klase (class). Strukture i klase su skoro potpuno izjednačene na jeziku 
C++, jer se tretiraju na potpuno identičan način (osim dole navedenih izuzetaka):
• i strukture i klase mogu imati podatke članove i funkcije članice, uključujući i konstruktore, destruktore i 
operatorske funkcije
• i strukture i klase mogu imati javne, zaštićene i privatne članove
• i jedne i druge mogu se izvoditi, mogu imati polimorfne operacije itd.
❖ Jedine razlike između strukture i klase su sledeće:
• ako se u deﬁniciji strukture ne navede speciﬁkator prava pristupa, podrazumeva se public; ako se u deﬁniciji klase 
ne navede speciﬁkator prava pristupa, podrazumeva se private
• ako se u deﬁniciji klase ili strukture, prilikom izvođenja iz druge klase ili strukture (dozvoljeno je sve), za osnovnu 
strukturu ne navede speciﬁkator prava pristupa, podrazumeva se public, dok se za osnovnu klasu podrazumeva 
private
❖ Ovo su, ipak, krajnje sporedne razlike i ne treba se na njih oslanjati, jer to može da učini program slabije razumljivim: 
svakako je bolje uvek navoditi speciﬁkatore prava pristupa eksplicitno, radi razumljivosti
❖ Zbog svega ovoga, strukture (struct) se koriste samo u izuzetnim situacijama, kada treba predstaviti sasvim jednostavne 
apstraktne tipove podataka, po pravilu onda kada se oni koriste samo za implementaciju nekih drugih struktura ili 
apstrakcija; strukture tada po pravilu imaju samo podatke članove i eventualno konstruktore, retko kada i neke 
jednostavne operacije ili destruktore
❖ U svim drugim slučajevima, posebno kada je potrebno da imaju iole složenije operacije ili predstavljaju apstrakciju, 
treba koristiti klase
 240
