--- PAGE 1 ---
Septembar 2024. Copyright 2018-2024 by Dragan Milićev
Reference
❖ Iako se referenca ne može razvezati od objekta nekom operacijom (takva operacija ne 
postoji), ona, potpuno isto kao i pokazivač, može postati viseća (dangling reference), 
ukoliko objekat za koji je referenca vezana prestane da živi dok referenca još uvek živi; 
tipično, ako funkcija vrati referencu na automatski objekat koji nestaje izlaskom iz 
funkcije
❖ Kao i za pokazivače, obraćanje objektu na koga upućuje viseća referenca ima 
nedeﬁnisane posledice
❖ Na primer, ovo ne valja, iako nije greška u prevođenju (mada prevodilac može izdati 
upozorenje ako prepozna ovaj problem):
int& f () { 
  int r=1; 
  … 
  return r; 
} 
int& g (int i) { 
  … 
  return i; 
}
 237
Funkcija vraća referencu na automatski objekat koji nestaje pri povratku iz funkcije - viseća 
referenca
Potpuno isto, i formalni argument je automatski objekat koji nestaje pri povratku iz 
funkcije - viseća referenca

--- PAGE 2 ---
Septembar 2024. Copyright 2018-2024 by Dragan Milićev
Reference
❖ Reference i pokazivači na objekte imaju mnoge sličnosti:
• u najvećem broju slučajeva implementiraju se na isti način: imaju vrednost adrese objekta za koji su 
vezani
• pristup do objekta i preko pokazivača i preko reference je posredan
• polimorﬁzam (dinamičko vezivanje) se aktivira pri posrednom pristupu do objekta i preko 
pokazivača i preko reference
• mnoga pravila, a naročito pravila konverzije, npr. pokazivača/reference na izvedenu klasu u 
pokazivač/referencu na dostupnu osnovnu klasu, važe i za pokazivače i za reference na isti način
❖ Međutim, postoje značajne razlike između pokazivača i reference:
• pokazivač se može preusmeriti tako da ukazuje na drugi objekat; referenca je od trenutka svog 
nastanka, tj. od inicijalizacije, trajno vezana za isti objekat
• pokazivač može da ne ukazuje ni na šta (ima vrednost null); referenca uvek, od početka do kraja 
svog životnog veka, upućuje na jedan (isti) objekat
• pristup do objekta preko pokazivača vrši se preko operatora *; pristup do objekta preko reference je 
neposredan, tj. ne zahteva nikakav operator – sama upotreba reference u izrazu odnosi se na 
referencirani objekat
 238
