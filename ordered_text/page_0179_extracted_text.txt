--- PAGE 1 ---
Septembar 2024. Copyright 2018-2024 by Dragan Milićev
Pretprocesiranje
❖ Direktivom #deﬁne uvodi se nov simbol (identiﬁkator) u pretprocesiranje (u 
tabelu simbola pretprocesora deﬁnisanih ovom direktivom)
❖ Opciono se može deﬁnisati i makrozamena: svaka pojava datog simbola 
zamenjuje se datim tekstom u nastavku direktive; mogući su i argumenti 
makrozamene:
#define _a_h 
#define N 10 
#define max(a,b) (((a)>=(b))?(a):(b)) 
int a[N]; 
void f (int a, int b){ 
  ... 
  int c = max(x/3,y+1); 
  ... 
} 
 179
Jednostavno deﬁniše simbol _a_h u tabelu simbola pretprocesora
Svaka pojava simbola N zamenjuje se tekstom (literalom 10)
Makrozamena sa argumentima
Prevodilac će videti deklaraciju:  int a[10];
Prevodilac će videti deklaraciju: 
int c = (((x/3)>=(y+1))?(x/3):(y+1));

--- PAGE 2 ---
Septembar 2024. Copyright 2018-2024 by Dragan Milićev
Pretprocesiranje
❖ Direktive #if, #elif (znači “else-if”), #ifdef (znači “if-deﬁned”) i #ifndef (znači “if-not-deﬁned”) 
omogućuju uslovno prevođenje: tekst uokviren odgovarajućim direktivama biće prevođen 
samo ako je odgovarajući uslov ispunjen; za direktive #ifdef/#ifndef, uslov je ispunjen ako je 
dati simbol deﬁnisan/nije deﬁnisan pretprocesoru (pomoću prethodne direktive #deﬁne):
#ifdef _a_h 
  … 
#endif 
❖ Ove direktive mogu da se koriste npr. za prevođenje delova koda koji treba da postoji samo 
ako se program prevodi za odgovarajuću platformu, konﬁguraciju i slično; prevodioci 
dozvoljavaju da im se zada simbol pretprocesora koji se smatra generalno (globalno) 
deﬁnisanim za sve fajlove, iako nije eksplicitno deﬁnisan direktivom #deﬁne:
#ifdef Windows 
 … // Windows-dependent code 
#elif defined(Linux) 
 … // Linux-dependent code 
#endif
 180
